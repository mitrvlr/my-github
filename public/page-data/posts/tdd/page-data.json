{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/tdd","webpackCompilationHash":"","result":{"data":{"markdownRemark":{"frontmatter":{"title":"TDD","path":"/posts/tdd","tags":["front-end"],"date":"June 21, 2018"},"html":"<h1>TDD</h1>\n<p>테스트 주도 개발 (Test Driven Development)</p>\n<h2>Unit Test</h2>\n<p>Unit Test(단위테스트)란 코드의 기능 단위를 테스트 하는 것</p>\n<p>TDD를 다른 관점에서 바라본 BDD라는 해결책을 제시</p>\n<h2>BDD</h2>\n<p>동작 지향 개발 (Behavior Driven Development)</p>\n<p>유저 스토리 개념을 끌어들인 테스트 작성법</p>\n<ul>\n<li>Given : 초기 상황</li>\n<li>When : 어떤 이벤트가 발생</li>\n<li>Then : 후속 결과를 기대</li>\n</ul>\n<h2>Module</h2>\n<p>모듈 생성 원칙</p>\n<ol>\n<li>단일 책임 원칙에 따라 모듈은 한가지 역할만 한다.</li>\n<li>자신의 사용할 객체가 있다면 의존성 주입 형태로 제공한다.</li>\n</ol>\n<h2>Cycle</h2>\n<p>하나의 기능에 Fail > Success > Refactor > fail > success > ... 사이클로 개발한다.</p>\n<h2>Test Double</h2>\n<p>단위 테스트 패턴으로 테스트하기 곤란한 컴포넌트를 대체하여 테스트한다.\n(특정 동작을 흉내 내는 정도지만 테스트하기엔 적합)</p>\n<ul>\n<li>더미(dummy) : 인자를 채우기 위해 사용</li>\n<li>스텁(sturb) : 더미를 개선하여 실제 동작하게끔 만듦</li>\n<li>스파이(spy) : 스텁과 유사. 내부적으로 기록을 남기는 추가 기능</li>\n<li>페이크(fake) : 스텁에서 발전한 실제 코드. 운영에서는 사용할 수 없다.</li>\n<li>목(mock) : 더미, 스텁, 스파이를 혼합한 형태</li>\n</ul>\n<h2>Thinking in TDD</h2>\n<ul>\n<li>단일 책임 원칙을 지킨다.</li>\n<li>모듈 단위로 개발한다.</li>\n<li>뷰 모듈은 돔을 캡슐화해야 한다.</li>\n</ul>\n<h4>Reference</h4>\n<ul>\n<li><a href=\"https://slides.com/jeonghwan/fe-tdd#/\">[김정환님의 프론트엔드 개발과 TDD]</a></li>\n</ul>"}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}