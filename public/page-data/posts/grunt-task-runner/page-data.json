{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/grunt-task-runner","webpackCompilationHash":"","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Task Runner 'Grunt'","path":"/posts/grunt-task-runner","tags":["front-end"],"date":"May 30, 2016"},"html":"<p><img src=\"https://cloud.githubusercontent.com/assets/24470477/23152209/c6064286-f843-11e6-9d3b-877d28eb5bb6.png\" alt=\"grund-js-opt\"></p>\n<h3>Grunt</h3>\n<ul>\n<li>프로젝트에서 반복해서 수행하는 빌드, 테스트, 배포 등의 과정을 하나의 명령어로 간단하게 실행할 수 있는 빌드 툴</li>\n<li>package.json을 통해서 선언적인 설정을 통해서 task를 정의하고 이를 task로 연결해서 실행한다.</li>\n<li>grunt는 외부에서 본체로 정보를 넣고, 본체에서 정보를 끄집어내는 i/o (input-output:입출력) 연산방식으로 동작을 한다. 즉, 컴파일 후 임시 파일에 기록이 되고, 임시 파일은 autoprefixer에 의해 사용 된 후 최종 생성물을 대상 파일에 기록된다.</li>\n</ul>\n<h3>package.json</h3>\n<ol>\n<li>해당 프로젝트를 npm모듈로 npm에 퍼블리싱할 때 사용하는 메타데이터를 저장한 파일이다.</li>\n<li>프로젝트에 필요한 grunt와 grunt plug-in 들은 이 파일의 devDependencies 항목에 나열한다.</li>\n<li>Gruntfile과 함께 루트 디렉트리에 있어야 한다.</li>\n<li>해당 파일이 있는 폴더에서 커맨드 명령어 npm install(npm i)을 실행하면 이 파일 안에 있는 dependency 목록의 모듈들을 해당 버전으로 인스톨한다.</li>\n<li>plug-in 설치</li>\n<li>npm install <module> </li>\n<li>npm install <module> --save (-S) : -dev와 다르게 배포(dist)시 에도 의존(dependencies)하는 모듈로 기술된다.</li>\n<li>npm install <module> --save-dev (-D) : 모듈설치와 package.json 의 devDependencies(개발시에만 의존) 항목에 모듈이 추가된다. </li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">grunt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// grunt wrapper function</span>\n\ngrunt<span class=\"token punctuation\">.</span><span class=\"token function\">initConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// project settings</span>\n\n  pkg<span class=\"token punctuation\">:</span> grunt<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">readJSON</span><span class=\"token punctuation\">(</span><span class=\"token string\">'package.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    task_A<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      target_a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      target_b<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    task_B<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      target<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// task를 지원하는 plug-in 로드</span>\ngrunt<span class=\"token punctuation\">.</span><span class=\"token function\">loadNpmTasks</span><span class=\"token punctuation\">(</span><span class=\"token string\">'plug-in'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Custom tasks</span>\ngrunt<span class=\"token punctuation\">.</span><span class=\"token function\">loadNpmTasks</span><span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'task1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'task2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>task를 저장, 정의하고 Grunt plug-in을 불러오는데 사용한다.</li>\n<li>프로젝트의 메타데이터를 package.json에서 가져와서 grunt config로 주입한다.</li>\n<li>내부 구성 요소</li>\n<li>wrapper 함수 : 모든 Gruntfile은 wrapper 함수를 기본 형태로 사용한다.</li>\n<li>프로젝트와 task 의 환경설정</li>\n<li>grunt plugin 과 task 로딩</li>\n<li>사용자 정의의 task 설정</li>\n<li>task 가 실행되면 grunt는 그 task의 이름으로 gruntfile의 환경설정 객체에서 프로퍼티를 찾고 이를 해당 task의 환경설정으로 사용한다.</li>\n<li>Multi-task의 경우 다시 별도의 target명을 사용하여 개별적인 환경설정을 설정할 수 있다.</li>\n<li>grunt task1 을 실행하면 차례대로 target의 환경설정을 갖고온다.</li>\n<li>grunt task1:target1, grunt task1:target2와 같이 task와 target을 모두 사용해서 지정하면 특정 환경 설정만 갖고온다.</li>\n<li>grunt : grunt의 실제 기능을 지닌 모듈. </li>\n<li>package.json 에 devDependecies로 지정하여 프로젝트 내부의 의존성 모듈로 설치한다.</li>\n<li>grunt-cli : 터미널에서 grunt 명령어를 사용한다. 별도의 기능은 없고 grunt 모듈을 실행하는 역할을 한다. </li>\n<li>package.json 필요한 플러그인을 설정을 기반한 task 빌드 툴</li>\n</ol>"}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}